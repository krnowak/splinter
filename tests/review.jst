include('Patch');
include('Review');
include('TestUtils');

let assertEquals = TestUtils.assertEquals;

let patch_text = <<<
diff --git a/gi/arg.c b/gi/arg.c
index b37e1a7..51da8f7 100644
--- a/gi/arg.c
+++ b/gi/arg.c
@@ -212,8 +212,6 @@ gjs_array_to_array(JSContext   *context,
                    GITypeInfo  *param_info,
                    void       **arr_p)
 {
-    guint32 i;
-    jsval elem;
     GITypeTag element_type;
 
     element_type = g_type_info_get_tag(param_info);
@@ -1126,8 +1124,8 @@ gjs_g_arg_release_in_arg(JSContext  *context,
 
     /* we don't own the argument anymore */
     if (transfer == GI_TRANSFER_EVERYTHING)
-        /* We're done */
-        return;
+        /* Success! */
+        return JS_TRUE;
 
     type_tag = g_type_info_get_tag( (GITypeInfo*) type_info);
 ' +
diff --git a/gi/function.c b/gi/function.c
index 2ef8642..b8aae11 100644
--- a/gi/function.c
+++ b/gi/function.c
@@ -261,6 +261,7 @@ gjs_invoke_c_function(JSContext      *context,
     if (return_tag != GI_TYPE_TAG_VOID)
         n_return_values += 1;
 
+    return_values = NULL; /* Quiet gcc warning about initialization */
     if (n_return_values > 0) {
         if (invoke_ok) {
             return_values = g_newa(jsval, n_return_values);
>>>;

let p = new Patch.Patch(patch_text);
let r = new Review.Review(p);

r.setIntro('I like this patch');
assertEquals(<<<
I like this patch
>>>, r.toString());

let argC = r.getFile('gi/arg.c');
let loc = argC.patchFile.getLocation(216,215);
r.getFile('gi/arg.c').addComment(loc, Patch.REMOVED, 'Should you have removed elem?');
assertEquals(<<<
I like this patch

::: gi/arg.c
@@ -214,3 @@
 {
-    guint32 i;
-    jsval elem;

Should you have removed elem?
>>>, r.toString());

let loc = argC.patchFile.getLocation(1130,1128);
r.getFile('gi/arg.c').addComment(loc, Patch.CHANGED, 'This comment seems unnecessary');
assertEquals(<<<
I like this patch

::: gi/arg.c
@@ -214,3 @@
 {
-    guint32 i;
-    jsval elem;

Should you have removed elem?

@@ -1128,3 +1126,3 @@
     if (transfer == GI_TRANSFER_EVERYTHING)
-        /* We're done */
-        return;
+        /* Success! */
+        return JS_TRUE;

This comment seems unnecessary
>>>, r.toString());

loc = argC.patchFile.getLocation(1128,1126);
argC.addComment(loc, Patch.CHANGED, "Why this transfer?");
assertEquals(<<<
I like this patch

::: gi/arg.c
@@ -214,3 @@
 {
-    guint32 i;
-    jsval elem;

Should you have removed elem?

@@ -1127,2 +1125,2 @@
     /* we don't own the argument anymore */
     if (transfer == GI_TRANSFER_EVERYTHING)

Why this transfer?

@@ -1128,3 +1126,3 @@
     if (transfer == GI_TRANSFER_EVERYTHING)
-        /* We're done */
-        return;
+        /* Success! */
+        return JS_TRUE;

This comment seems unnecessary
>>>, r.toString());

let r2 = new Review.Review(p);
r2.parse(r.toString());
assertEquals(r.toString(), r2.toString());

loc = argC.patchFile.getLocation(216,215);
let comment = argC.getComment(loc, Patch.REMOVED);
assertEquals(loc, comment.location);
assertEquals(Patch.REMOVED, comment.type);
comment.remove();

assertEquals(null, argC.getComment(loc));

let patch_text = <<<
diff a/foo.c b/foo.c
--- a/foo.c
+++ b/foo.c
@@ -1,16 +1,16 @@
 C1
 C2
 C3
 C4
-A5
-A6
-A7
-A8
-A9
-A10
-A11
-A12
+B5
+B6
+B7
+B8
+B9
+B10
+B11
+B12
 C13
 C14
 C15
 C16
>>>;

p = new Patch.Patch(patch_text);
r = new Review.Review(p);

let f = r.getFile('foo.c');
f.addComment(4, Patch.REMOVED, "Line A5 was removed")
f.addComment(5, Patch.ADDED, "Line B6 was added")
f.addComment(11, Patch.CHANGED, "8 lines were changed")

assertEquals(<<<
::: foo.c
@@ -3,3 @@
 C3
 C4
-A5

Line A5 was removed

@@ +4,3 @@
 C4
+B5
+B6

Line B6 was added

@@ -5,8 +5,8 @@
-A5
-A6
-A7
... 5 more ...
+B5
+B6
+B7
... 5 more ...

8 lines were changed
>>>, r.toString())

let r2 = new Review.Review(p);
r2.parse(r.toString());
assertEquals(r.toString(), r2.toString());

